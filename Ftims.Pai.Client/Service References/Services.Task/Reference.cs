//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ftims.Pai.Client.Services.Task {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://schemas.datacontract.org/2004/07/Ftims.Pai.Service.TimesheetService.DTO")]
    [System.SerializableAttribute()]
    public partial class Task : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateTask", Namespace="http://schemas.datacontract.org/2004/07/Ftims.Pai.Service.TimesheetService.DTO")]
    [System.SerializableAttribute()]
    public partial class CreateTask : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.Task.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Find", ReplyAction="http://tempuri.org/ITaskService/FindResponse")]
        Ftims.Pai.Client.Services.Task.Task[] Find(string expression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Find", ReplyAction="http://tempuri.org/ITaskService/FindResponse")]
        System.Threading.Tasks.Task<Ftims.Pai.Client.Services.Task.Task[]> FindAsync(string expression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Get", ReplyAction="http://tempuri.org/ITaskService/GetResponse")]
        Ftims.Pai.Client.Services.Task.Task Get(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Get", ReplyAction="http://tempuri.org/ITaskService/GetResponse")]
        System.Threading.Tasks.Task<Ftims.Pai.Client.Services.Task.Task> GetAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetAll", ReplyAction="http://tempuri.org/ITaskService/GetAllResponse")]
        Ftims.Pai.Client.Services.Task.Task[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetAll", ReplyAction="http://tempuri.org/ITaskService/GetAllResponse")]
        System.Threading.Tasks.Task<Ftims.Pai.Client.Services.Task.Task[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Create", ReplyAction="http://tempuri.org/ITaskService/CreateResponse")]
        Ftims.Pai.Client.Services.Task.Task Create(Ftims.Pai.Client.Services.Task.CreateTask task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Create", ReplyAction="http://tempuri.org/ITaskService/CreateResponse")]
        System.Threading.Tasks.Task<Ftims.Pai.Client.Services.Task.Task> CreateAsync(Ftims.Pai.Client.Services.Task.CreateTask task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Update", ReplyAction="http://tempuri.org/ITaskService/UpdateResponse")]
        void Update(string id, Ftims.Pai.Client.Services.Task.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Update", ReplyAction="http://tempuri.org/ITaskService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(string id, Ftims.Pai.Client.Services.Task.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Delete", ReplyAction="http://tempuri.org/ITaskService/DeleteResponse")]
        void Delete(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Delete", ReplyAction="http://tempuri.org/ITaskService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : Ftims.Pai.Client.Services.Task.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<Ftims.Pai.Client.Services.Task.ITaskService>, Ftims.Pai.Client.Services.Task.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Ftims.Pai.Client.Services.Task.Task[] Find(string expression) {
            return base.Channel.Find(expression);
        }
        
        public System.Threading.Tasks.Task<Ftims.Pai.Client.Services.Task.Task[]> FindAsync(string expression) {
            return base.Channel.FindAsync(expression);
        }
        
        public Ftims.Pai.Client.Services.Task.Task Get(string id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<Ftims.Pai.Client.Services.Task.Task> GetAsync(string id) {
            return base.Channel.GetAsync(id);
        }
        
        public Ftims.Pai.Client.Services.Task.Task[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Ftims.Pai.Client.Services.Task.Task[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public Ftims.Pai.Client.Services.Task.Task Create(Ftims.Pai.Client.Services.Task.CreateTask task) {
            return base.Channel.Create(task);
        }
        
        public System.Threading.Tasks.Task<Ftims.Pai.Client.Services.Task.Task> CreateAsync(Ftims.Pai.Client.Services.Task.CreateTask task) {
            return base.Channel.CreateAsync(task);
        }
        
        public void Update(string id, Ftims.Pai.Client.Services.Task.Task task) {
            base.Channel.Update(id, task);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(string id, Ftims.Pai.Client.Services.Task.Task task) {
            return base.Channel.UpdateAsync(id, task);
        }
        
        public void Delete(string id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string id) {
            return base.Channel.DeleteAsync(id);
        }
    }
}
